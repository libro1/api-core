swagger: '2.0'
info:
  version: 1.0.0
  title: Libro 1
  # put the contact info for your development or API team
  contact:
    email: javiemgz@gmail.com
    name: Javier GÃ³mez

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Auth
  description: Auth operations
- name: Categories
  description: User categories managment
- name: Transactions
  description: User Transactions managment


paths:
  /register:
    post:
      tags:
      - Auth
      summary: Creates a new user
      description: Creates a new user, in order to login to the application
      parameters:
      - in: body
        required: true
        name: inventoryItem
        description: New user to create
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: missing parameter
        422:
          description: Mail already registered
        200:
          description: User created
  /login:
    post:
      tags:
      - Auth
      summary: Creates a new user
      description: Creates a new user, in order to login to the application
      parameters:
      - in: body
        required: true
        name: UserCredentials
        description: User email and password
        schema:
          $ref: '#/definitions/User'
      responses:
        401:
          description: Bad credentials
        200:
          description: Logged in
          schema:
            $ref: '#/definitions/Session'
            
  /categories:
    post:
      tags:
      - Categories
      summary: Creates a new category
      description: Creates a new category, in order separate transactions
      parameters:
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: body
        required: true
        name: New category
        description: Name and hexa color for category, id not required
        schema:
          $ref: '#/definitions/Category'
      responses:
        401:
          description: Missing or invalid token
        201:
          description: Category created
    get:
      tags:
      - Categories
      summary: Returns all the user categories
      description: Returns all the user categories fully described
      parameters:
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      responses:
        401:
          description: Missing or invalid token
        200:
          description: Success, array of categories
          schema:
            type: array
            items: 
              $ref: '#/definitions/Category'
  
  /categories/{categoryId}:
    put:
      tags:
      - Categories
      summary: Edit category
      description: Edits a category specified in the id
      parameters:
      - in: path
        name: categoryId
        type: string
        format: uuid
        required: true
        description: string objectId of the category id
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: body
        required: true
        name: Edited category
        description: Name and hexa color for category, id not required
        schema:
          $ref: '#/definitions/Category'
      responses:
        401:
          description: Missing or invalid token
        200:
          description: Category edited
          
    delete:
      tags:
      - Categories
      summary: Delete category
      description: Deletes the category specified in the id
      parameters:
      - in: path
        name: categoryId
        type: string
        format: uuid
        required: true
        description: string objectId of the category id
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      responses:
        401:
          description: Missing or invalid token
        200:
          description: Success, category deleted
          schema:
            type: array
            items: 
              $ref: '#/definitions/Category'
  
  /transactions:
    post:
      tags:
      - Transactions
      summary: Create transation
      parameters:
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: body
        required: true
        name: New transaction
        description: Data to create a new transaction, id is not required
        schema:
          $ref: '#/definitions/Transaction'
      responses:
        400:
          description: Missing body property
        401:
          description: Missing or invalid token
        201:
          description: Transaction created
    get:
      tags:
      - Transactions
      summary: Returns all the user transactions
      description: Returns all the user transactions fully described
      parameters:
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: query
        name: expense
        type: boolean
        description: "Send true to get only expenses, false al the earnings"
      - in: query
        name: year
        type: integer
        description: "Number of the year ex 2015"
      - in: query
        name: month
        type: integer
        description: "Number of the month to get from 1 - 12"
      - in: query
        name: category
        type: string
        format: uuid
        description: "The id of a category to get all transactions that belongs 
        to specified category"
      responses:
        401:
          description: Missing or invalid token
        200:
          description: Success, array of categories
          schema:
            type: array
            items: 
              $ref: '#/definitions/Transaction'

  /transactions/{transactionId}:
    put:
      tags:
      - Transactions
      summary: Edit transation
      parameters:
      - in: path
        name: transactionId
        type: string
        format: uuid
        required: true
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: body
        required: true
        name: Transaction
        description: Data to edit a transaction, id is not required
        schema:
          $ref: '#/definitions/Transaction'
      responses:
        400:
          description: Missing body property
        404:
          description: Transaction not found
        401:
          description: Missing or invalid token
        200:
          description: Transaction edited
    delete:
      tags:
      - Transactions
      summary: Delete a transaction
      parameters:
      - in: path
        name: transactionId
        type: string
        format: uuid
        required: true
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      responses:
        404:
          description: Transaction not found
        401:
          description: Missing or invalid token
        200:
          description: Success, transaction deleted

  /transactions/report:
    get:
      tags:
      - Transactions
      summary: Report of all transactions
      description: Returns a detailed report of user expenses and earnigs, that 
        can be filtered many ways
      parameters:
      - in: header
        name: UserToken
        description: Logged user token
        type: string
      - in: query
        name: expense
        type: boolean
        description: "Send true to get only expenses, false al the earnings"
      - in: query
        name: month
        type: integer
        description: "Number of the month to get from 1 - 12"
      - in: query
        name: year
        type: integer
        description: "Number of the year ex 2015"
      - in: query
        name: category
        type: string
        format: uuid
        description: "The id of a category to get all transactions that belongs 
        to specified category"
      responses:
        401:
          description: Missing or invalid token
        200:
          description: Success
          schema:
            $ref: '#/definitions/Report'

definitions:
  User:
    type: object
    required:
    - name
    - lastName
    - email
    properties:
      _id:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
      name:
        type: string
        example: Ricardo
      lastName:
        type: string
        example: Perez
      email:
        type: string
        example: ricardo@mail.com
        
  FullUser:
    type: object
    required:
    - name
    - lastName
    - email
    properties:
      _id:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
      name:
        type: string
        example: Ricardo
      lastName:
        type: string
        example: Perez
      email:
        type: string
        example: ricardo@mail.com
      customCategories:
        type: array
        items: 
          $ref: '#/definitions/Category'
  
  Category:
    required:
    - name
    - color
    properties:
      _id:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
      name:
        type: string
        example: Casa
      color:
        type: string
        format: hexadecimal
        example: '#fbfbfb'
        
  Transaction:
    required:
    - name
    - date
    - amount
    - expense
    - category
    properties:
      _id:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
        
      name:
        type: string
        example: 'Gasto 1'
        
      date:
        type: string
        format: date
        description: 'Date string in format YYYY-MM-DD'
        example: '2020-08-24'
        
      amount:
        type: number
        example: 500
        
      userId:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
      
      expense:
        type: boolean
        example: false
        description: 'Explicits if the transaccion is an expense or not'
        
      category:
        $ref: '#/definitions/Category'
        
  Session:
    properties:
      token:
        type: string
        format: jwt
        description: "SessiÃ³n token that grants access to make request"
      name:
        type: string
        description: "Name of the logged user"
      fullName:
        type: string
        description: "Name and last name of the logged user"
        
      userId:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
        description: "Id of the logged user"
  
  CategoryReport:
    properties:
      _id:
        type: string
        format: uuid
        example: 5f447cecb7dc5b00178e9619
      name:
        type: string
        example: Casa
      color:
        type: string
        format: hexadecimal
        example: '#fbfbfb'
      value:
        type: number
        example: 4500
        description: "Total expeses/earnings in the category"
  
  TotalGrouped:
    properties:
      _id:
        type: boolean
        format: uuid
        description: "False for expenses true for earnings"
      value:
        type: number
        example: 4500
        description: "Total expeses/earnings of all categories"
  
  Report:
    properties:
      expenses:
        type: array
        description: Total expenses grouped by categories
        items: 
          $ref: '#/definitions/CategoryReport'
      earnings:
        type: array
        description: Total earnings grouped by categories
        items: 
          $ref: '#/definitions/CategoryReport'
      total:
        type: array
        description: Total amount of money, grouped in expenses (_id true) or
          earnings (_id false)
        items: 
          $ref: '#/definitions/TotalGrouped'
      balanceStatus:
        type: number
        example: -200
        description: Total earnings minus total expenses